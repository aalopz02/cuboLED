/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerTokenManager.java */
import javax.swing.JOptionPane;
import java.util.*;
import java.io.*;

/** Token Manager. */
public class SyntaxCheckerTokenManager implements SyntaxCheckerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000000L) != 0L)
            return 10;
         if ((active0 & 0x20000L) != 0L)
            return 38;
         if ((active0 & 0x10L) != 0L)
            return 41;
         if ((active0 & 0x643c50000L) != 0L)
         {
            jjmatchedKind = 35;
            return 13;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 35;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x42400000L) != 0L)
            return 21;
         if ((active0 & 0x605850000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0x5800000L) != 0L)
            return 42;
         if ((active0 & 0x600450000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x600440000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active0 & 0x10000L) != 0L)
            return 43;
         return -1;
      case 4:
         if ((active0 & 0x40000L) != 0L)
            return 44;
         if ((active0 & 0x600400000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
            return 44;
         }
         return -1;
      case 5:
         if ((active0 & 0x600400000L) != 0L)
            return 45;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 1);
      case 41:
         return jjStopAtPos(0, 2);
      case 44:
         return jjStopAtPos(0, 3);
      case 46:
         return jjStopAtPos(0, 7);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 43);
      case 61:
         return jjStartNfaWithStates_0(0, 4, 41);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8008000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x20006000L);
      case 70:
         return jjStopAtPos(0, 21);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 84:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 91:
         return jjStopAtPos(0, 44);
      case 93:
         return jjStopAtPos(0, 45);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x42400000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1010000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 123:
         return jjStopAtPos(0, 5);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8060800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x21880000L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 21);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x16400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 103:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020000L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x6400L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x40800L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 42);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x410000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x400400L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         break;
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x610000000L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 45);
         break;
      case 70:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 45);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         break;
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x4800L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 7:
               case 13:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(3, 10);
                  break;
               case 42:
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(11, 16);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 21:
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(26, 32);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(11, 16);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 44:
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 43:
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff004000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 41:
                  if (curChar == 62)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(0);
                  }
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 61)
                     jjCheckNAddTwoStates(28, 30);
                  else if (curChar == 60)
                     jjCheckNAdd(30);
                  else if (curChar == 62)
                     jjCheckNAdd(28);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 60)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(0);
                  break;
               case 14:
                  if ((0x3ff004000000000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 17:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(22, 25);
                  break;
               case 19:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(17, 21);
                  break;
               case 20:
                  if ((0x3ff004000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(11, 16);
                  break;
               case 22:
                  if ((0xac2000000000L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 23:
                  if (curChar == 42 && kind > 36)
                     kind = 36;
                  break;
               case 24:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 47 && kind > 36)
                     kind = 36;
                  break;
               case 26:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 60 && kind > 37)
                     kind = 37;
                  break;
               case 28:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 29:
                  if (curChar == 62)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 31:
                  if (curChar == 60)
                     jjCheckNAdd(30);
                  break;
               case 32:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if (curChar == 45)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x2bffbf6100000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(28, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 7:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(3, 10);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 42:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(11, 16);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 38:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 21:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(26, 32);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(11, 16);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 44:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 43:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(17, 21);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(22, 25);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 4:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjstateSet[jjnewStateCnt++] = 13;
                  }
                  else if (curChar == 77)
                     jjAddStates(33, 34);
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if (curChar == 101 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 103 && kind > 12)
                     kind = 12;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(3, 10);
                  break;
               case 14:
                  if ((0x7fffffe87ffffffL & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(22, 25);
                  break;
               case 19:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(17, 21);
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(11, 16);
                  break;
               case 34:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 77)
                     jjAddStates(33, 34);
                  break;
               case 37:
                  if (curChar == 108 && kind > 12)
                     kind = 12;
                  break;
               case 39:
                  if (curChar == 110 && kind > 12)
                     kind = 12;
                  break;
               case 40:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 15, 16, 14, 15, 16, 17, 18, 19, 20, 21, 14, 15, 16, 17, 18, 
   19, 14, 15, 16, 17, 18, 14, 15, 16, 17, 14, 15, 16, 17, 18, 19, 
   20, 38, 40, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\50", "\51", "\54", "\75", "\173", "\175", "\56", null, null, 
"\124\151\155\145\162", "\122\141\156\147\157\137\124\151\155\145\162", null, 
"\104\151\155\137\106\151\154\141\163", "\104\151\155\137\103\157\154\165\155\156\141\163", "\103\165\142\157", 
"\154\151\163\164", "\115\141\151\156", "\162\141\156\147\145", "\116\145\147", "\124", "\106", 
"\151\156\163\145\162\164", "\144\145\154", "\154\145\156", "\151\146", "\146\157\162", 
"\103\141\154\154", "\120\162\157\143\145\144\165\162\145", "\104\145\154\141\171", "\151\156", 
"\123\164\145\160", "\102\154\151\156\153", "\163\150\141\160\145\106", 
"\163\150\141\160\145\103", null, null, null, null, null, null, null, null, "\73", "\133", "\135", "\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x783fffffffffL, 
};
static final long[] jjtoSkip = {
   0x7c000000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[41];
static private final int[] jjstateSet = new int[82];
static protected char curChar;
/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
