PARSER_BEGIN(SyntaxChecker)

package sintaxAnalysis;

import java.io.*;
import java.util.ArrayList;

public class SyntaxChecker {

	private static int sameLineDCL = 0;
	private static int mainDefinido = 0;
	private static int scope = 0;
	private static int numeroVariable = 0;
	private static int inMain = 0;
	private static Boolean addVarFalg = true;
	private static String indiceAcceso = "";
	private static ArrayList<String> valoresIgualdadTabla;
	private static String nombreArchivo = "D:/proyects/cuboLEDJCC/src/sintaxAnalysis/eje.txt";
	private static TablaVariables tablaVariables = new TablaVariables();
	public static ArrayList<String> constantesConfig = new ArrayList<String>();
	
    public static void main(String[] args) {
        try {
			File file = new File(nombreArchivo);
			BufferedReader br = new BufferedReader(new FileReader(file)); 
			String st; 	
			String in = "";
			while ((st = br.readLine()) != null) {
				in += st;
				in += '\n';
			}
			System.out.println(in);
            new SyntaxChecker(new java.io.StringReader(in)).INICIAR();
            System.out.println("Syntax is okay");
			tablaVariables.imprimirIDS();
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
	
	static void checkMainDefined(int llamada){
		if (mainDefinido == 0){
			if (llamada ==  1){
				System.out.println("Main method not defined");
				ParseException e = generateParseException();  
				System.out.println(e.toString()); 
			} else {
				mainDefinido = 1;
			}
		} else {
			System.out.println("Main method already defined");
			ParseException e = generateParseException();  
			System.out.println(e.toString());
		}
	}
	
	static void checkMainDCL() {
		if (inMain == 1){
			System.out.println("Illegal declaration in main method");
			ParseException e = generateParseException();  
			System.out.println(e.toString());
		}
	}
	
	static void agregarVariable() {
		if (addVarFalg) {
			tablaVariables.agregarIndiceAcceso(indiceAcceso);
		}
	}
	
	static void checkSameLineDCL() {
		if (sameLineDCL != 0) {
			System.out.println("Expected same number of expresions as ids in same line declaration");
			ParseException e = generateParseException();  
			System.out.println(e.toString());
		}
	}
	
}

PARSER_END(SyntaxChecker)

SKIP:  { " " | "\t" | "\n" | "\r" | <COMMENT: (("--")([";",",","a"-"z","0"-"9","_","&","@","A"-"Z"," ","+","*","-","/","%","=","(",")",".","[","]"])+)"\n" >}	

TOKEN: { "(" | ")" | "," | "=" | "{" | "}"|"."
		| <NUM: (["0"-"9"])+> 
		| <BOOL: "true"|"false">
		| <TIMER: "Timer">
		| <RANGO_TIMER: "Rango_Timer" >
		| <OPCIONESRANGO: "Seg" | "Mil" | "Min" >
		| <DIM_FILAS: "Dim_Filas" >
		| <DIM_COLUMNAS: "Dim_Columnas" >
		| <CUBO: "Cubo">
		| <LIST: "list">
		| <MAIN: "Main">
		| <RANGO: "range">
		| <NEG: "Neg">
		| <T: "T">
		| <F: "F">
		| <INSERT: "insert">
		| <DELETE: "del">
		| <LENGTH: "len">
		| "if" | "for" | "Call" | "Procedure" | "Delay" | "in" | "Step"| "Blink" 
		| <SHAPEF: "shapeF">
		| <SHAPEC: "shapeC">
		| <ID: (["a"-"z"](["a"-"z" ,"0"-"9" ,"_","&","@","A"-"Z"]){0,9})>
		| <OPERADORES: ("+" | "*" | "-" | "**" | "/" | "//" | "%")>
		| <OPERADOR_COMPARADOR: ( "==" | "<" | "<" | "=>" | ">=" | "<>")>
		}
		

void INICIAR(): {} {Constantes() S()} 		

void S(): {} { Sder() | <EOF> }
	
void Sder(): {} {
				Inicial() S() 
				|Procedure() S() 
				}

void Exp(): {} {
				Call() Exp() 
				|Inicial() Exp()
				|forFunction() Exp()
				|ifFunction() Exp() 
				|Delay_Function() Exp() 
				|Blink_Function() Exp()
				|Empty()
}


void Inicial(): {Token op;} { Identificadores() ( "." (OperacionesListas() | FuncionesListas()) | "=" {checkMainDCL();} Igualdad()  ) ";" {checkSameLineDCL();}}

void Identificadores(): {Token id;} { id=<ID> {
												tablaVariables.agregarVariable(numeroVariable,id.image,scope);
												numeroVariable++;
												}
	IdentificadoresAux() 
	}

void IdentificadoresAux(): {} {"," {sameLineDCL += 1;} Identificadores() | {addVarFalg = true;} Listas() {indiceAcceso = "";} | Empty()}

void IgualdadValoresOperables(): {Token aux;} {aux = <ID> (<OPERADORES> {valoresIgualdadTabla.add(aux.image);} IgualdadAux() 
																		| "." {indiceAcceso += aux.image; indiceAcceso += ".";} FuncionesShape() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";}
																		| {indiceAcceso+= aux.image; addVarFalg = false;} Listas() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = ""; addVarFalg = true;}
																		| Empty()) 
							| <NUM> {valoresIgualdadTabla.add("NUM");} (<OPERADORES> IgualdadValoresOperables() | Empty())
							| "(" IgualdadAux() ")" ((<OPERADORES> IgualdadValoresOperables()) | IgualdadValoresOperables())
							| Empty()}

void IgualdadAux(): {Token aux;} {  aux = <BOOL> {valoresIgualdadTabla.add(aux.image);} 
									| "(" IgualdadValoresOperables() ")" (( <OPERADORES> IgualdadValoresOperables()) | IgualdadValoresOperables())
									| "[" {addVarFalg = false; indiceAcceso+="[";} ValoresListas() "]" {indiceAcceso+="]"; valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = ""; addVarFalg = true;}
									| <LIST> {addVarFalg = false;} CrearLista() Listas() {addVarFalg = true;}
									| FuncionLen() 
									| IgualdadValoresOperables() }

void Igualdad(): {Token aux;} { {valoresIgualdadTabla = new ArrayList<String>();} IgualdadAux() {tablaVariables.agregarIgualdad(numeroVariable-sameLineDCL,scope,valoresIgualdadTabla);} 
								("," {sameLineDCL -= 1;} Igualdad() | Empty())}
	
void Listas(): {} { "[" {indiceAcceso += "[";} AccesoLista() "]" {indiceAcceso += "]";} Listas() {agregarVariable();}
							| <LIST> CrearLista() Listas()
							| Empty() }

void AccesoLista(): {} { 
						":" "," {indiceAcceso += ":,";} Numeros()  
						| Numeros() AccesoListaAux() 
						| ValoresListas() }

void AccesoListaAux(): {} { ":" {indiceAcceso+=":";} Numeros() | "," {indiceAcceso+=",";} Numeros() | Numeros() | Empty()}

void ValoresListas(): {Token aux;} { aux = <BOOL> {indiceAcceso+=aux.image;} ValoresListasAux()
									| Listas() ValoresListasAux()
									| Empty()}	
									
void ValoresListasAux(): {} {"," ( {indiceAcceso+=",";} ValoresListas() | Listas()) | Empty()}

void FuncionesListas(): {Token aux;} {(aux = <NEG> | aux = <T> | aux = <F>) {tablaVariables.agregarIgualdad(numeroVariable,scope,aux.image);} }
	
void CrearLista(): {Token aux;} { "(" aux = <RANGO> "(" {System.out.println(aux);} RangeParam()}

void RangeParam(): {Token n;} { Numeros() RangeParamVal()}

void RangeParamVal(): {Token val;} { "," val = <BOOL> {System.out.println(val.image);} ")" ")" }	
	
void OperacionesListas(): {Token aux;} { aux = <INSERT> {addVarFalg = false; valoresIgualdadTabla = new ArrayList<String>(); valoresIgualdadTabla.add(aux.image);} "(" valoresInsert() ")" {tablaVariables.agregarIgualdad(numeroVariable,scope,valoresIgualdadTabla); addVarFalg = true;}
										| aux = <DELETE> {addVarFalg = false; valoresIgualdadTabla = new ArrayList<String>(); valoresIgualdadTabla.add(aux.image);} "(" valoresDel() ")" {tablaVariables.agregarIgualdad(numeroVariable,scope,valoresIgualdadTabla); addVarFalg = true;} }	
	
void valoresInsert(): {} { 
							{indiceAcceso = ""; valoresIgualdadTabla.add("InsertMatriz");} Listas() {valoresIgualdadTabla.add(indiceAcceso);} InsertMatriz() | {valoresIgualdadTabla.add("InsertListas");} InsertListas() }	
	
void InsertMatriz(): {} { "," {indiceAcceso = "";} Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} ("," Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} | Empty()) }	
	
void valoresDel(): {} {Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} ("," Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";}| Empty())}	
	
void InsertListas(): {Token val;} { {indiceAcceso = "";} Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} "," 
									(val = <BOOL> {valoresIgualdadTabla.add(val.image);} 
									| Listas() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} )}	
	
void Numeros(): {Token index;} { 
								index = <NUM> {indiceAcceso += index.image;}
								| index = <ID> {indiceAcceso += index.image;} ("." {indiceAcceso+= ".";} FuncionesShape() | Empty()) 
								| FuncionLen()} 	
	
void FuncionesShape(): {Token aux;} { (aux = <SHAPEC> | aux = <SHAPEF>) {indiceAcceso += aux.image;}}	
	
void FuncionLen(): {Token aux;} { aux = <LENGTH> {indiceAcceso+=aux.image;} "(" aux = <ID> {indiceAcceso+=";"; indiceAcceso+=aux.image; indiceAcceso+=";";} Listas() ")" {indiceAcceso = "";}}	

void Iterable():{Token aux;}{ aux = <ID> {System.out.println(aux.image);} Iterable_Aux() | <NUM> | FuncionLen()}

void Iterable_Aux(): {} {"[" { System.out.print("["); } Adentro_Lista() "]" { System.out.print("]"); } Iterable_Aux() | "." FuncionesShape() | Empty()}

void ifFunction(): {Token aux;} { aux = "if" {System.out.println(aux);} Iterable() aux = <OPERADOR_COMPARADOR> {System.out.println(aux);} 
								(aux = <BOOL> {System.out.println(aux);} | Iterable() ) "{" Exp() "}"}		
	
void Constantes(): {} { Timer() Rango_Timer() Dim_Filas() Dim_Columnas() Cubo() }	
	
void Timer(): {Token n;} {<TIMER> "=" n = <NUM> ";" {constantesConfig.add(n.image);}}

void Rango_Timer(): {Token rango;} { <RANGO_TIMER> "=" rango = <OPCIONESRANGO> ";" {constantesConfig.add(rango.image);}}

void Dim_Filas(): {Token filas;} { <DIM_FILAS> "=" filas = <NUM> ";" {constantesConfig.add(filas.image);}}

void Dim_Columnas(): {Token columnas;} { <DIM_COLUMNAS> "=" columnas = <NUM> ";" {constantesConfig.add(columnas.image);}}

void Cubo(): {Token i; Token j;} { <CUBO> "=" i = <NUM> "," j = <NUM> ";" {constantesConfig.add(i.image); constantesConfig.add(j.image);}}

void Empty() : {}
{
     {}
} 

void Delay_Function(): {} { { System.out.println("Delay"); } "Delay"  "(" Delay_Expression() ")" ";"}

void Delay_Expression(): {Token num; Token range;} {num=<NUM> "," range=<OPCIONESRANGO> |  Empty() }

void Blink_Function(): {} {{ System.out.println("Blink"); } "Blink"  "(" { System.out.println("("); } Blink_Expression() ")" { System.out.println(")"); } ";"}

void Blink_Expression(): {Token id; Token bool;} {id=<ID> { System.out.println(id); } "[" { System.out.println("["); } Adentro_Lista() "]" { System.out.println("]"); } "," { System.out.println(","); } Blink_Expression_Aux()  }

void Blink_Expression_Aux(): {Token bool; Token num;}{num=<NUM> { System.out.println(num); } Blink_Expression_Aux1() | bool=<BOOL> { System.out.println(bool); }}

void Blink_Expression_Aux1(): {Token range; Token bool;}{"," { System.out.println(","); } range= <OPCIONESRANGO> { System.out.println(range); } "," { System.out.println(","); } bool=<BOOL> { System.out.println(bool); }}

void Adentro_Lista(): {Token num;} {(num=<NUM> | num = ":") { System.out.println(num);}  Adentro_Lista_Aux1() }

void Adentro_Lista_Aux1(): {Token num;} {":" { System.out.println(":");} num=<NUM> { System.out.println(num); } | "," num=<NUM> { System.out.println(num); }| Empty() }

void Procedure(): {} {"Procedure" { System.out.println("Procedure");} NombreRutina() }

void NombreRutina():{Token id;}{ id=<ID> { System.out.println(id); } normalProc() | <MAIN> { System.out.println("Main"); checkMainDefined(0); inMain = 1;} mainProc()}

void normalProc(): {} {"(" Parametros() ")" "{" {System.out.println("Scope aumenta"); scope = 1;} Exp() "}" }

void mainProc(): {} {"(" ")" "{" Exp() "}" {inMain = 0;}}

void Call():{Token id;} {"Call" { System.out.println("Call"); } 
							id=<ID> { System.out.print(id); } 
							"("  
							Igualdad() 
							")"
							";"
						}

void Parametros(): {Token id;} { id = <ID> {System.out.println(id);} ParametrosAux() | Empty()}

void ParametrosAux(): {} {"," ParametrosAux1() | Empty()}

void ParametrosAux1(): {Token id;} {id = <ID> {System.out.println(id);} ParametrosAux()}

void forFunction():{Token id;} {"for" { System.out.println("for"); } id=<ID> { System.out.print(id); } "in"  { System.out.print("in"); } Iterable() Step()  "{" { System.out.println("{"); } Exp() "}" { System.out.println("}"); }  }

void Step():{Token num;}{("Step" { System.out.print("Step"); } num=<NUM> { System.out.print(num); })|Empty() }