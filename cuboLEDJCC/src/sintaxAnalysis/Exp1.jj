PARSER_BEGIN(SyntaxChecker)

package sintaxAnalysis;

import Estructuras.Nodo;
import Estructuras.Grafo;
import java.io.*;
import java.util.ArrayList;

public class SyntaxChecker {

	private static int sameLineDCL = 0;
	private static int mainDefinido = 0;
	private static int scope = 0;
	private static int numeroVariable = 0;
	private static int inMain = 0;
	private static Boolean addVarFalg = true;
	private static String indiceAcceso = "";
	private static Boolean inCall = false;
	private static ArrayList<String> valoresIgualdadTabla;
	private static String nombreArchivo = "D:/proyects/cuboLED/cuboLEDJCC/src/sintaxAnalysis/eje.txt";
	private static TablaVariables tablaVariables = new TablaVariables();
	public static ArrayList<String> constantesConfig = new ArrayList<String>();
	public static Grafo grafo = new Grafo();
	
    public static void main(String[] args) {
        try {
			File file = new File(nombreArchivo);
			BufferedReader br = new BufferedReader(new FileReader(file)); 
			String st; 	
			String in = "";
			while ((st = br.readLine()) != null) {
				in += st;
				in += '\n';
			}
			System.out.println(in);
            new SyntaxChecker(new java.io.StringReader(in)).INICIAR();
            System.out.println("Syntax is okay");
			tablaVariables.imprimirIDS();
            tablaVariables.checkVariables();
            Nodo aux = grafo.getInicial();
            /*
            while (aux != null){
                System.out.println("Tipo: " + aux.getTipo());
                System.out.println("Contenido: " + aux.getContenido());
                aux = aux.getNext();
            }
            */     
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
	
	static void checkMainDefined(int llamada, Token token) throws ParseException{
		if (mainDefinido == 0){
			if (llamada ==  1){
				System.out.println("Main method not defined");
				System.out.println("In line: ");
			    System.out.println(token.beginLine);
				ParseException e = generateParseException();  
				throw e;
			} else {
				mainDefinido = 1;
			}
		} else {
			System.out.println("Main method already defined");
			System.out.println("In line: ");
			System.out.println(token.beginLine);
			ParseException e = generateParseException();  
			throw e;
		}
	}
	
	static void checkMainDCL(Token token) throws ParseException{
		if (inMain == 1){
			System.out.println("Illegal declaration in main method");
			System.out.println("In line: ");
			System.out.println(token.beginLine);
			ParseException e = generateParseException();  
			throw e;
		}
	}
	
	static void agregarVariable() {
		if (addVarFalg) {
			tablaVariables.agregarIndiceAcceso(indiceAcceso);
		}
	}
	
	static void checkSameLineDCL(Token token) throws ParseException{
		if (sameLineDCL != 0) {
			System.out.println("Expected same number of expresions as ids in same line declaration");
			System.out.println("In line: ");
			System.out.println(token.beginLine);
			ParseException e = generateParseException();  
			throw e;
		}
	}
	
}

PARSER_END(SyntaxChecker)

SKIP:  { " " | "\t" | "\n" | "\r" | <COMMENT: (("--")([";",",","a"-"z","0"-"9","_","&","@","A"-"Z"," ","+","*","-","/","%","=","(",")",".","[","]"])+)"\n" >}	

TOKEN: { "(" | ")" | "," | "=" | "{" | "}"|"."
		| <NUM: (["0"-"9"])+> 
		| <BOOL: "true"|"false">
		| <TIMER: "Timer">
		| <RANGO_TIMER: "Rango_Timer" >
		| <OPCIONESRANGO: "Seg" | "Mil" | "Min" >
		| <DIM_FILAS: "Dim_Filas" >
		| <DIM_COLUMNAS: "Dim_Columnas" >
		| <CUBO: "Cubo">
		| <LIST: "list">
		| <MAIN: "Main">
		| <RANGO: "range">
		| <NEG: "Neg">
		| <T: "T">
		| <F: "F">
		| <INSERT: "insert">
		| <DELETE: "del">
		| <LENGTH: "len">
		| "if" | "for" | "Call" | "Procedure" | "Delay" | "in" | "Step"| "Blink" 
		| <SHAPEF: "shapeF">
		| <SHAPEC: "shapeC">
		| <ID: (["a"-"z"](["a"-"z" ,"0"-"9" ,"_","&","@","A"-"Z"]){0,9})>
		| <OPERADORES: ("+" | "*" | "-" | "**" | "/" | "//" | "%")>
		| <OPERADOR_COMPARADOR: ( "==" | "<" | "<" | "=>" | ">=" | "<>")>
		}
		

void INICIAR(): {} {Constantes() S()} 		

void S(): {} { Sder() | <EOF> }
	
void Sder(): {} {
				Inicial() S() 
				|Procedure() S() 
				}

void Exp(): {} {
				Call() Exp() 
				|Inicial() Exp()
				|forFunction() Exp()
				|ifFunction() Exp() 
				|Delay_Function() Exp() 
				|Blink_Function() Exp()
				|Empty()
}


void Inicial(): {Token aux;} { Identificadores() ( "." {grafo.addNodo("DCL",".");} (OperacionesListas() | FuncionesListas()) | aux = "="  {grafo.addNodo("DCL","="); checkMainDCL(aux);} Igualdad() {checkSameLineDCL(aux);} ) ";" {grafo.addNodo("ENDLINE","");}}

void Identificadores(): {Token id;} { id=<ID> {
												tablaVariables.agregarVariable(numeroVariable,id.image,scope);
												grafo.addNodo("DCL",id.image);
												numeroVariable++;
												}
	IdentificadoresAux() 
	}

void IdentificadoresAux(): {} {"," {grafo.addNodo("DCL",","); sameLineDCL += 1;} Identificadores() | {addVarFalg = true;} Listas() {grafo.addNodo("DCL",indiceAcceso); indiceAcceso = "";} | Empty()}

void IgualdadValoresOperables(): {Token aux;} {aux = <ID> (<OPERADORES> {valoresIgualdadTabla.add(aux.image);} IgualdadAux() 
																		| "." {indiceAcceso += aux.image; indiceAcceso += ".";} FuncionesShape() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";}
																		| {indiceAcceso+= aux.image; addVarFalg = false;} Listas() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = ""; addVarFalg = true;}
																		| Empty()) 
							| aux = <NUM> {grafo.addNodo("NUM",aux.image); valoresIgualdadTabla.add("NUM");} (aux = <OPERADORES> {grafo.addNodo("OPER",aux.image);} IgualdadValoresOperables() | Empty())
							| "(" {grafo.addNodo("OPENPAR","(");} IgualdadAux() ")" {grafo.addNodo("CLOSEPAR",")");} ((aux = <OPERADORES> {grafo.addNodo("OPER",aux.image);} IgualdadValoresOperables()) | IgualdadValoresOperables())
							| Empty()}

void IgualdadAux(): {Token aux;} { aux = <BOOL> { grafo.addNodo("BOOL",aux.image); valoresIgualdadTabla.add("BOOL");} 
									| "(" {grafo.addNodo("OPENPAR","(");} IgualdadValoresOperables() ")" {grafo.addNodo("CLOSEPAR",")");} ((aux = <OPERADORES> {grafo.addNodo("OPER",aux.image);} IgualdadValoresOperables()) | IgualdadValoresOperables())
									| "[" {indiceAcceso+="["; addVarFalg = false;} ValoresListas() "]" {indiceAcceso+="]"; valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = ""; addVarFalg = true;}
									| <LIST> {addVarFalg = false; valoresIgualdadTabla.add("createList");} CrearLista() Listas() {addVarFalg = true;}
									| FuncionLen() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";}
									| IgualdadValoresOperables() }

void Igualdad(): {Token aux;} { {valoresIgualdadTabla = new ArrayList<String>();} IgualdadAux() {
																									if (!inCall){
																										tablaVariables.agregarIgualdad(numeroVariable-sameLineDCL,scope,valoresIgualdadTabla);
																									} else {
																										tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);
																									}
																								} 
								("," {grafo.addNodo("DCL",","); sameLineDCL -= 1;} Igualdad() | Empty())}
	
void Listas(): {} { "[" {indiceAcceso += "[";} AccesoLista() "]" {indiceAcceso += "]";} Listas() {agregarVariable();}
							| <LIST> {addVarFalg = false; valoresIgualdadTabla.add("createList");} CrearLista() Listas() 
							| Empty() }

void AccesoLista(): {} { 
						":" "," {indiceAcceso += ":,";} Numeros() (AccesoLista() | Empty())
						| Numeros() AccesoListaAux() 
						| ValoresListas() }

void AccesoListaAux(): {} { ":" {indiceAcceso+=":";} Numeros() | "," {indiceAcceso+=",";} Numeros() | Numeros() | Empty()}

void ValoresListas(): {Token aux;} { aux = <BOOL> {indiceAcceso+=aux.image;} ValoresListasAux()
									| Listas() ValoresListasAux()
									| Empty()}	
									
void ValoresListasAux(): {} {"," ( {indiceAcceso+=",";} ValoresListas() | Listas()) | Empty()}

void FuncionesListas(): {Token aux;} {(aux = <NEG> | aux = <T> | aux = <F>) {tablaVariables.agregarIgualdad(numeroVariable,scope,aux.image);} }
	
void CrearLista(): {Token aux;} { "(" <RANGO> "(" RangeParam()}

void RangeParam(): {Token n;} { Numeros() {valoresIgualdadTabla.add(indiceAcceso); indiceAcceso="";} RangeParamVal()}

void RangeParamVal(): {} { "," <BOOL> {valoresIgualdadTabla.add("BOOL");} ")" ")" }	
	
void OperacionesListas(): {Token aux;} { aux = <INSERT> {grafo.addNodo("FUN.INSERT","insert"); addVarFalg = false; valoresIgualdadTabla = new ArrayList<String>(); valoresIgualdadTabla.add(aux.image);} "(" valoresInsert() ")" {tablaVariables.agregarIgualdad(numeroVariable,scope,valoresIgualdadTabla); addVarFalg = true;}
										| aux = <DELETE> {grafo.addNodo("FUN.DEL","delete"); addVarFalg = false; valoresIgualdadTabla = new ArrayList<String>(); valoresIgualdadTabla.add(aux.image);} "(" valoresDel() ")" {tablaVariables.agregarIgualdad(numeroVariable,scope,valoresIgualdadTabla); addVarFalg = true;} }	
	
void valoresInsert(): {} { 
							{indiceAcceso = ""; valoresIgualdadTabla.add("InsertMatriz");} Listas() {grafo.addNodo("INSERT.MATRIZ",""); grafo.addNodo("VAL",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso);} InsertMatriz() | {valoresIgualdadTabla.add("InsertListas"); grafo.addNodo("INSERT.LISTA","");} InsertListas() }	
	
void InsertMatriz(): {} { "," {indiceAcceso = "";} Numeros() {grafo.addNodo("NUM",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} ("," Numeros() {grafo.addNodo("NUM",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} | Empty()) {grafo.addNodo("ENDINSERT","");}}	
	
void valoresDel(): {} {Numeros() {grafo.addNodo("NUM",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} ("," Numeros() {grafo.addNodo("NUM",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";}| Empty()) {grafo.addNodo("ENDDELETE","");}}	
	
void InsertListas(): {Token aux;} { {indiceAcceso = "";} Numeros() {grafo.addNodo("NUM",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} "," 
									(aux = <BOOL> {valoresIgualdadTabla.add("BOOL"); grafo.addNodo("BOOL",aux.image);} 
									| Listas() {grafo.addNodo("VAL",indiceAcceso); valoresIgualdadTabla.add(indiceAcceso); indiceAcceso = "";} ) {grafo.addNodo("ENDINSERT","");}}	
	
void Numeros(): {Token index;} { 
								index = <NUM> {indiceAcceso += index.image;}
								| index = <ID> {indiceAcceso += index.image;} ("." {indiceAcceso+= ".";} FuncionesShape() | Empty()) 
								| FuncionLen() } 	
	
void FuncionesShape(): {Token aux;} { (aux = <SHAPEC> | aux = <SHAPEF>) {indiceAcceso += aux.image;}}	
	
void FuncionLen(): {Token aux;} { <LENGTH> {valoresIgualdadTabla.add("len");} "(" aux = <ID> {indiceAcceso+=aux.image;} Listas() ")"}	

void Iterable():{Token aux;}{ aux = <ID> {tablaVariables.agregarVariable(numeroVariable,aux.image,scope);} Iterable_Aux() {tablaVariables.agregarIndiceAcceso(indiceAcceso); indiceAcceso = ""; tablaVariables.agregarIgualdad(-99,scope,""); }
							| <NUM> {tablaVariables.agregarVariable(-99,"",scope); tablaVariables.agregarIgualdad(numeroVariable,scope,"NUM");}
							| {valoresIgualdadTabla = new ArrayList<String>();} FuncionLen() {tablaVariables.agregarVariable(-99,"",scope); tablaVariables.agregarIgualdad(numeroVariable, scope, valoresIgualdadTabla); indiceAcceso = "";}}

void Iterable_Aux(): {} {"[" {indiceAcceso+="[";} Adentro_Lista() "]" {indiceAcceso+="]";} Iterable_Aux() | "."  {indiceAcceso+= ".";} FuncionesShape() | Empty()}

void ifFunction(): {} {"if"  {int aux = numeroVariable; numeroVariable=-2;} Iterable() <OPERADOR_COMPARADOR> 
									(<BOOL> {tablaVariables.agregarVariable(-99,"",scope); tablaVariables.agregarIgualdad(numeroVariable,scope,"BOOL");} 
									| Iterable() 
								) {numeroVariable=aux;} "{" Exp() "}"}		
	
void Constantes(): {} { Timer() Rango_Timer() Dim_Filas() Dim_Columnas() Cubo() }	
	
void Timer(): {Token n;} {<TIMER> "=" n = <NUM> ";" {constantesConfig.add(n.image);}}

void Rango_Timer(): {Token rango;} { <RANGO_TIMER> "=" rango = <OPCIONESRANGO> ";" {constantesConfig.add(rango.image);}}

void Dim_Filas(): {Token filas;} { <DIM_FILAS> "=" filas = <NUM> ";" {constantesConfig.add(filas.image);}}

void Dim_Columnas(): {Token columnas;} { <DIM_COLUMNAS> "=" columnas = <NUM> ";" {constantesConfig.add(columnas.image);}}

void Cubo(): {Token i;} { <CUBO> "=" i = <ID> {constantesConfig.add(i.image);} ";"}

void Empty() : {} { {} } 

void Delay_Function(): {} {"Delay"  "(" Delay_Expression() ")" ";"}

void Delay_Expression(): {} {<NUM> "," <OPCIONESRANGO> |  Empty() }

void Blink_Function(): {} { {tablaVariables.agregarProc("Blink",false); indiceAcceso=""; valoresIgualdadTabla = new ArrayList<String>();} "Blink" "("  Blink_Expression() ")" ";"}

void ListaBlink(): {} { "[" {indiceAcceso += "[";} Numeros() "]" {indiceAcceso += "]";} ListaBlink() | Empty()}

void Blink_Expression(): {Token id;} {id=<ID> {indiceAcceso+=id.image; indiceAcceso+="[";} "[" Numeros() "]"
							{indiceAcceso+="]";} ListaBlink() {valoresIgualdadTabla.add(indiceAcceso); tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);} "," Blink_Expression_Aux()  }

void Blink_Expression_Aux(): {Token num;}{ {valoresIgualdadTabla = new ArrayList<String>();}
													(num=<NUM> {valoresIgualdadTabla.add(num.image); tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);} Blink_Expression_Aux1() 
													|<BOOL> {valoresIgualdadTabla.add("BOOL"); tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);})}

void Blink_Expression_Aux1(): {Token range;}{"," {valoresIgualdadTabla = new ArrayList<String>();} range= <OPCIONESRANGO> {valoresIgualdadTabla.add(range.image); tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);} 
														"," {valoresIgualdadTabla = new ArrayList<String>();} <BOOL> {valoresIgualdadTabla.add("BOOL"); tablaVariables.agregarParamProc(valoresIgualdadTabla,scope);} }

void Adentro_Lista(): {Token num;} {(num=<NUM> {indiceAcceso+=num.image;} | num = ":" {indiceAcceso+=num.image;} ) Adentro_Lista_Aux1() }

void Adentro_Lista_Aux1(): {Token num;} {":" {indiceAcceso+=":";} num=<NUM> {indiceAcceso+=num.image;} | "," {indiceAcceso+=",";} num=<NUM> {indiceAcceso+=num.image;} | Empty() }

void Procedure(): {} {"Procedure" NombreRutina() }

void NombreRutina():{Token id;}{ id=<ID> {tablaVariables.agregarProc(id.image, true);} normalProc() | id = <MAIN> {checkMainDefined(0,id); inMain = 1;} mainProc()}

void normalProc(): {} {"(" (Parametros() | Empty()) ")" "{" {scope = 1;} Exp() "}" {scope = 0;}}

void mainProc(): {} {"(" ")" "{" Exp() "}" {inMain = 0; scope = 0;}}

void Call():{Token id;} {"Call" id=<ID> {tablaVariables.agregarProc(id.image,false); inCall = true;} "(" (Igualdad() | Empty()) ")" ";" { inCall = false; tablaVariables.checkProc();}}

void Parametros(): {Token id;} { id = <ID> {tablaVariables.agregarParamProc(id.image);} ParametrosAux()}

void ParametrosAux(): {} {"," Parametros() | Empty()}

void forFunction():{Token id;} {"for" {scope += 1;} id=<ID> {tablaVariables.agregarVariable(-1,id.image,scope); tablaVariables.agregarIgualdad(-1,scope,"");}
								"in" {int aux = numeroVariable; numeroVariable=-1;} Iterable() {numeroVariable=aux;} 
								Step() "{" Exp() "}" {scope -= 1;} }

void Step():{}{"Step" <NUM> | Empty() }